// <auto-generated />
using System;
using CanteenSystem.Web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CanteenSystem.Web.Migrations
{
    [DbContext(typeof(CanteenSystemDbContext))]
    [Migration("20201122000109_dcd")]
    partial class dcd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CanteenSystem.Web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("CreatedDate")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime>("MealAvailableDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MealMenuId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UpdatedDate")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.HasIndex("MealMenuId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ValidFromDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidToDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.MealMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MealTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("MealTypeId");

                    b.ToTable("MealMenus");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.MealMenuAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AvailabilityDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MealMenuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealMenuId");

                    b.ToTable("MealMenuAvailability");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.MealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("MealTypes");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("MealMenuId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MealMenuOrderDate")
                        .HasColumnType("datetime");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealMenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.ParentMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ParentMapping");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Department")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RollNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Card", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.UserProfile", "UserProfile")
                        .WithMany("Cards")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("FK_Cards_UserProfiles")
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Cart", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.MealMenu", "MealMenu")
                        .WithMany("Carts")
                        .HasForeignKey("MealMenuId")
                        .HasConstraintName("FK_Cart_MealMenus")
                        .IsRequired();

                    b.Navigation("MealMenu");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.MealMenu", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.Discount", "Discount")
                        .WithMany("MealMenus")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_MealMenus_Discounts");

                    b.HasOne("CanteenSystem.Web.Models.MealType", "MealType")
                        .WithMany("MealMenus")
                        .HasForeignKey("MealTypeId")
                        .HasConstraintName("FK_MealMenus_MealTypes")
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("MealType");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.MealMenuAvailability", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.MealMenu", "MealMenu")
                        .WithMany("MealMenuAvailabilities")
                        .HasForeignKey("MealMenuId")
                        .HasConstraintName("FK_MealMenuAvailability_MealMenus")
                        .IsRequired();

                    b.Navigation("MealMenu");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Order", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.UserProfile", "UserProfile")
                        .WithMany("Orders")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("FK_Orders_UserProfiles")
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.OrderItem", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.MealMenu", "MealMenu")
                        .WithMany("OrderItems")
                        .HasForeignKey("MealMenuId")
                        .HasConstraintName("FK_OrderItems_MealMenus")
                        .IsRequired();

                    b.HasOne("CanteenSystem.Web.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItems_Orders")
                        .IsRequired();

                    b.Navigation("MealMenu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.ParentMapping", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.UserProfile", "ParentUserProfile")
                        .WithMany("ParentUserProfiles")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_UserParent_ParentUserProfiles")
                        .IsRequired();

                    b.HasOne("CanteenSystem.Web.Models.UserProfile", "StudentUserProfile")
                        .WithMany("StudentUserProfiles")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_UserParent_StudentUserProfiles")
                        .IsRequired();

                    b.Navigation("ParentUserProfile");

                    b.Navigation("StudentUserProfile");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Payment", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Payments_Orders")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.UserProfile", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_ApplicationUsers_UserProfile");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanteenSystem.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CanteenSystem.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Discount", b =>
                {
                    b.Navigation("MealMenus");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.MealMenu", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("MealMenuAvailabilities");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.MealType", b =>
                {
                    b.Navigation("MealMenus");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CanteenSystem.Web.Models.UserProfile", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Orders");

                    b.Navigation("ParentUserProfiles");

                    b.Navigation("StudentUserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
